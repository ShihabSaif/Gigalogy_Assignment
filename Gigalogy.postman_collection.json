{
	"info": {
		"_postman_id": "77e3df38-e23b-4fc5-ab84-25793f515923",
		"name": "Gigalogy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22022903"
	},
	"item": [
		{
			"name": "search-item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// ✅ 1. Basic checks\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is successful\", function () {\r",
							"    pm.expect(response.success).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Result array exists\", function () {\r",
							"    pm.expect(response).to.have.property(\"result\");\r",
							"    pm.expect(response.result).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// ✅ 2. Ensure result not empty\r",
							"pm.test(\"Result is not empty\", function () {\r",
							"    pm.expect(response.result.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// ✅ 3. Validate fields exist (example: price, name)\r",
							"pm.test(\"Each item has required fields\", function () {\r",
							"    response.result.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"price\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// ✅ 4. Validate sorting by price (descending, since '-price')\r",
							"if (response.result.length > 1) {\r",
							"    const prices = response.result.map(i => i.price).filter(p => typeof p === \"number\");\r",
							"    const sorted = [...prices].sort((a, b) => b - a);\r",
							"    pm.test(\"Items are sorted by price (descending)\", function () {\r",
							"        pm.expect(prices).to.eql(sorted);\r",
							"    });\r",
							"}\r",
							"\r",
							"// ✅ 5. Log sample output to console (optional)\r",
							"console.log(\"Total results:\", response.result.length);\r",
							"console.log(\"First 3 item prices:\", response.result.slice(0, 3).map(i => i.price));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"yahoo_query_parameters\": {\r\n    \"query\": \"shirt\",\r\n    \"sort\": \"-price\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demo-shop-api.gigalogy.com.bd/v1/items/search",
					"protocol": "https",
					"host": [
						"demo-shop-api",
						"gigalogy",
						"com",
						"bd"
					],
					"path": [
						"v1",
						"items",
						"search"
					]
				}
			},
			"response": []
		}
	]
}